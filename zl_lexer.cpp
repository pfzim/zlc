#line 1 "zl_lexer.cpp"

#line 3 "zl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (int) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[398] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  111,  104,  100,  100,   93,  104,   93,   93,
       93,  104,   93,   93,   93,   93,   93,   96,   96,   93,
       93,   93,   99,   99,   99,   99,   93,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   93,  110,  101,  103,   93,   93,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   37,  107,  108,  100,   52,    0,
       94,    0,   85,   53,   86,    0,   95,    0,   83,   58,

       81,   59,   82,   55,    0,   98,  106,    0,   84,   98,
       96,    0,    0,   57,   80,   51,   79,   56,   99,   99,
       99,   99,   88,   99,   99,   99,   99,   99,   40,   99,
       99,   99,   99,   99,   99,   99,   99,   38,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   87,   54,  101,    0,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   34,   99,   99,   99,   28,   99,   99,
       99,   99,   99,   99,   99,  107,  109,   94,   95,    0,
        0,   77,    0,    0,    0,  105,   98,    0,   98,   97,

       89,   90,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       42,   99,   99,   99,   99,   66,   99,   46,   99,   99,
       99,   99,   99,   99,   99,   99,   63,   99,   99,   18,
       29,   99,   99,   25,   22,    3,    9,    7,    5,    4,
       11,    6,   99,    1,    8,   10,    2,   24,   33,   35,
       23,   19,   21,   32,   14,   99,   99,   26,   27,   20,
       99,   30,    0,    0,  102,   99,   91,   92,   99,   99,
       99,   99,   99,   99,   99,   99,   64,   99,   99,   39,
       99,   99,   99,   61,   99,   45,   99,   67,   99,   99,

       99,   99,   99,   99,   99,   73,   99,   16,   99,   99,
       13,   99,   17,    0,   99,   99,   99,   99,   99,   99,
        0,   36,   43,   99,   99,   99,   71,   99,   99,   99,
       68,   99,   99,   99,   99,   99,   41,   99,   99,   15,
       99,   99,   99,   99,   99,   99,   99,   72,   62,   99,
       60,   50,   69,   48,   65,   78,   99,   99,   12,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   75,
       76,   99,   99,   44,   49,   70,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   74,   99,   99,   99,
       99,   99,   31,   99,   99,   47,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,    7,
        7,   11,   12,    7,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   18,    7,    7,   19,
       20,   21,    7,    7,   22,   23,   24,   25,   26,   27,
       28,   28,   29,   28,   28,   30,   31,   32,   33,   34,
       28,   35,   36,   37,   38,   28,   28,   28,   28,   28,
        7,   39,    7,   40,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   28,   58,   59,   60,   61,   62,   63,   64,
       28,   65,   66,   67,   68,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    1,    1,    4,    4,    4,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        5,    4,    4,    4,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    1,    1
    } ;

static const flex_int16_t yy_base[407] =
    {   0,
        0,    0,    0,    0,   68,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  565,  564,
        0,    0,  574,  577,  135,  138,  553,  137,  577,  552,
      135,  135,  551,  134,  136,  134,  147,  147,  152,  140,
      550,  151,    0,  547,  530,  532,  546,  138,  507,  126,
      508,  124,  139,  507,  136,  506,  128,  515,  136,  502,
      504,  145,  509,  127,  577,  200,  577,  189,  188,  516,
      163,  514,  166,  177,  500,  160,  167,  498,  495,  170,
      508,  168,  505,  494,  577,    0,  534,  230,  577,  204,
      577,  207,  577,  577,  577,  538,  577,  241,  577,  577,

      577,  577,  577,  577,  533,  222,  238,  543,  577,  243,
      248,  259,    0,  525,  577,  577,  577,  524,    0,  513,
      512,  503,  577,  254,  481,  493,  496,  482,  475,  476,
      474,  480,  476,  473,  474,  474,  468,    0,  470,  466,
      470,  467,  470,  462,  465,  189,  462,  458,  459,  459,
      466,  465,  577,  577,  251,  303,  284,  469,  468,  459,
      463,  466,  447,  444,  199,  443,  217,  453,  448,  240,
      460,  446,  437,    0,  225,  448,  443,    0,  442,  439,
      455,  177,  453,  436,  436,    0,  577,  276,  483,  276,
        0,  577,  308,  477,  488,  577,  307,  310,  313,    0,

      577,  577,  454,  459,  462,  454,  464,  456,  439,  438,
      422,  427,  438,  421,  418,  434,  430,  429,  415,  431,
        0,  418,  427,  414,  413,    0,  420,    0,  414,  405,
      407,  409,  417,  282,  416,  411,    0,  415,  406,    0,
        0,  405,  416,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  414,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  406,  401,    0,    0,    0,
      393,    0,  324,  442,  577,  425,    0,    0,  419,  412,
      417,  404,  400,  400,  333,  392,    0,  393,  389,    0,
      383,  387,  365,    0,  360,    0,  349,    0,  348,  345,

      358,  347,  347,  357,  352,    0,  352,    0,  340,  348,
        0,  342,    0,  384,  359,  366,  365,  342,  345,  344,
      342,  577,    0,  332,  340,  330,    0,  334,  323,  327,
        0,  336,  333,  331,  318,  322,    0,  318,  316,    0,
      345,  332,  331,  330,  317,  327,  307,    0,    0,  311,
        0,    0,    0,    0,    0,    0,  320,  315,    0,  334,
      322,  321,  304,  307,  313,  303,  312,  301,  329,    0,
        0,  296,  299,    0,    0,    0,  291,  315,  299,  307,
      306,  287,  281,  297,  260,  272,    0,  275,  262,  246,
      243,  254,    0,  225,  191,    0,  577,  408,  413,  418,

      423,  425,  430,  435,  241,  149
    } ;

static const flex_int16_t yy_def[407] =
    {   0,
      397,    1,  398,  398,  397,    5,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  399,  399,
      398,  398,  397,  397,  397,  397,  397,  400,  397,  397,
      397,  401,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  402,  402,  402,  402,  397,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  397,  397,  397,  397,  397,  397,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  397,  403,  397,  397,  397,  400,
      397,  400,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  404,  397,  397,
      397,  397,  405,  397,  397,  397,  397,  397,  402,  402,
      402,  402,  397,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  397,  397,  397,  397,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  403,  397,  400,  397,  397,
      406,  397,  397,  397,  404,  397,  397,  397,  397,  405,

      397,  397,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  397,  406,  397,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  397,  402,  402,  402,  402,  402,  402,
      397,  397,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,    0,  397,  397,  397,

      397,  397,  397,  397,  397,  397
    } ;

static const flex_int16_t yy_nxt[646] =
    {   0,
       24,   25,   26,   25,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   39,   40,   41,
       42,   43,   43,   43,   43,   43,   44,   43,   43,   43,
       43,   45,   43,   43,   43,   43,   46,   43,   24,   47,
       48,   43,   49,   50,   51,   52,   53,   54,   43,   55,
       43,   43,   56,   43,   57,   43,   43,   58,   59,   60,
       61,   62,   63,   43,   43,   24,   64,   24,   24,   66,
       67,   66,   29,   28,   29,   29,   29,   32,   29,   29,
       29,   68,   69,   38,   39,   39,   29,   29,   29,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   24,   29,   70,   71,
       43,   72,   73,   74,   43,   43,   43,   75,   76,   43,
       43,   77,   78,   79,   80,   81,   82,   83,   43,   43,
       43,   84,   43,   24,   29,   85,   88,   88,   88,   88,
       88,   88,   91,   94,   97,  100,  153,  105,  102,  106,
      106,  106,  274,  101,   95,  103,  104,  107,  114,  115,
      110,  108,  111,  111,  111,  110,  109,  111,  111,  111,
      117,  118,  112,   98,  127,   92,  130,  112,  124,  125,
      132,  128,  138,  142,  145,  146,  150,  131,  143,  139,
      140,  133,  112,  154,  134,  147,  135,  112,  156,  136,

      151,  155,  108,  155,  106,  106,  106,  158,  161,   91,
      113,  162,  188,  172,  173,  163,  182,  159,  164,  165,
      166,  167,  175,  168,  174,  179,  169,  176,  183,  268,
      180,   88,   88,   88,  269,  170,  232,  106,  106,  106,
      193,  193,   92,  247,  200,   92,   96,  112,  194,  396,
      189,  193,  155,  233,  155,  248,  190,  190,  197,  197,
      197,  110,  249,  111,  111,  111,  251,  112,  112,  261,
      198,  198,  395,  112,  199,  199,  199,  206,  207,   96,
      252,   91,   96,   96,  255,   97,  262,   96,  112,  256,
      208,  273,  273,  112,  209,   96,  257,  210,   96,  394,

       96,  393,   96,  392,  191,  193,  193,  206,  207,  391,
      193,  193,  211,  194,   92,  390,  193,  389,  194,  388,
      208,  193,  197,  197,  197,  199,  199,  199,  199,  199,
      199,  303,  112,   97,  321,  321,  321,  387,  386,  314,
      314,  385,  304,  321,  321,  321,  384,  383,  382,  381,
      380,  277,  112,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  278,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,   97,  340,  339,  338,  337,  322,  336,

      335,  334,  333,  332,  331,  330,  329,  322,   65,   65,
       65,   65,   65,   86,   86,   86,   86,   86,   90,  328,
       90,   90,   90,   96,  327,   96,   96,   96,  119,  119,
      186,  186,  277,  186,  186,  195,  195,  195,  195,  195,
      326,  325,  324,  323,  320,  319,  318,  317,  316,  315,
      277,   97,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  278,  302,  301,  300,  299,  277,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      196,  275,   97,  272,  271,  270,  267,  266,  265,  264,

      263,  260,  259,  258,  254,  253,  250,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      205,  204,  203,  202,  201,  196,  192,   97,  187,  185,
      184,  181,  178,  177,  171,  160,  157,  152,  149,  148,
      144,  141,  137,  129,  126,  123,  122,  121,  120,  116,
       99,   93,   89,  397,   87,   87,   23,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397
    } ;

static const flex_int16_t yy_chk[646] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,   25,   25,   25,   26,
       26,   26,   28,   31,   32,   34,   64,   36,   35,   36,
       36,   36,  406,   34,   31,   35,   35,   37,   40,   40,
       38,   37,   38,   38,   38,   39,   37,   39,   39,   39,
       42,   42,   38,   32,   50,   28,   52,   39,   48,   48,
       53,   50,   55,   57,   59,   59,   62,   52,   57,   55,
       55,   53,   38,   64,   53,   59,   53,   39,   69,   53,

       62,   66,   69,   66,   68,   68,   68,   71,   73,   90,
       38,   73,   92,   76,   76,   73,   82,   71,   74,   74,
       74,   74,   77,   74,   76,   80,   74,   77,   82,  182,
       80,   88,   88,   88,  182,   74,  146,  106,  106,  106,
      107,  107,   90,  165,  405,   92,   98,  106,  107,  395,
       98,  107,  155,  146,  155,  165,   98,   98,  110,  110,
      110,  111,  165,  111,  111,  111,  167,  106,  110,  175,
      112,  112,  394,  111,  112,  112,  112,  124,  124,   98,
      167,  188,   98,   98,  170,  190,  175,   98,  110,  170,
      124,  190,  190,  111,  124,   98,  170,  124,   98,  392,

       98,  391,   98,  390,   98,  156,  156,  157,  157,  389,
      193,  193,  124,  156,  188,  388,  156,  386,  193,  385,
      157,  193,  197,  197,  197,  198,  198,  198,  199,  199,
      199,  234,  197,  273,  285,  285,  285,  384,  383,  273,
      273,  382,  234,  321,  321,  321,  381,  380,  379,  378,
      377,  373,  197,  372,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  358,  357,  350,  347,  346,  345,
      344,  343,  342,  341,  339,  338,  336,  335,  334,  333,
      332,  330,  329,  328,  326,  325,  324,  320,  319,  318,
      317,  316,  315,  314,  312,  310,  309,  307,  285,  305,

      304,  303,  302,  301,  300,  299,  297,  321,  398,  398,
      398,  398,  398,  399,  399,  399,  399,  399,  400,  295,
      400,  400,  400,  401,  293,  401,  401,  401,  402,  402,
      403,  403,  292,  403,  403,  404,  404,  404,  404,  404,
      291,  289,  288,  286,  284,  283,  282,  281,  280,  279,
      276,  274,  271,  267,  266,  253,  243,  242,  239,  238,
      236,  235,  233,  232,  231,  230,  229,  227,  225,  224,
      223,  222,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      195,  194,  189,  185,  184,  183,  181,  180,  179,  177,

      176,  173,  172,  171,  169,  168,  166,  164,  163,  162,
      161,  160,  159,  158,  152,  151,  150,  149,  148,  147,
      145,  144,  143,  142,  141,  140,  139,  137,  136,  135,
      134,  133,  132,  131,  130,  129,  128,  127,  126,  125,
      122,  121,  120,  118,  114,  108,  105,   96,   87,   84,
       83,   81,   79,   78,   75,   72,   70,   63,   61,   60,
       58,   56,   54,   51,   49,   47,   46,   45,   44,   41,
       33,   30,   27,   23,   20,   19,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
#line 2 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"

#include <malloc.h>
#include "zl_parser.h"

#define YY_EXTRA_TYPE cl_parser_params *
#define YYPP yyget_extra(yyscanner)
#define YY_DECL int yylex(zlval *yylval, yyscan_t yyscanner)

#define YY_INPUT(buf,result,max_size) \
	memcpy(buf, YYPP->source_code + YYPP->sc_offset, ((YYPP->sc_length - YYPP->sc_offset) > ((unsigned long) max_size))?max_size:(YYPP->sc_length - YYPP->sc_offset));\
	result = ((YYPP->sc_length - YYPP->sc_offset)> ((unsigned long) max_size))?max_size:(YYPP->sc_length - YYPP->sc_offset);\
	YYPP->sc_offset += result;

#define YY_NO_UNISTD_H			1

#define TRACK_LINES(s, l)						\
do {											\
	char *p = (s), *boundary = p+(l);			\
												\
	while (p<boundary)							\
	{											\
		if (*p == '\n') {						\
			YYPP->lineno++;						\
		}										\
		p++;									\
	}											\
} while (0)

#define TRACK_LINE(c) \
{ \
	if (c == '\n') \
	{ \
		YYPP->lineno++; \
	} \
}

#line 736 "zl_lexer.cpp"

/* %option noyylineno */
#line 739 "zl_lexer.cpp"

#define INITIAL 0
#define ST_IN_SCRIPTING 1
#define ST_IN_ASM 2
#define ST_DOUBLE_QUOTES 3
#define ST_SINGLE_QUOTE 4
#define ST_BACKQUOTE 5
#define ST_HEREDOC 6
#define ST_LOOKING_FOR_PROPERTY 7
#define ST_LOOKING_FOR_VARNAME 8
#define ST_COMMENT 9
#define ST_ONE_LINE_COMMENT 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 71 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"


#line 1016 "zl_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 398 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 397 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 73 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 0; // register offset at regs table
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 1;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 2;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 91 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 3;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 4;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 103 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 5;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 109 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 6;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 115 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 7;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 121 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 8;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 127 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 9;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 133 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 10;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 139 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 11;
	yylval->flags = ARG_REG;
	return T_REGISTER;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 145 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_PUSH;
	return T_OPERATOR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_POP;
	return T_OPERATOR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 155 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_RCALL;
	return T_OPERATOR;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 160 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_CALL;
	return T_OPERATOR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 165 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_TEST;
	return T_OPERATOR;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 170 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_ADD;
	return T_OPERATOR;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 175 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_MOV;
	return T_OPERATOR;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 180 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_SUB;
	return T_OPERATOR;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 185 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_MUL;
	return T_OPERATOR;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 190 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_DIV;
	return T_OPERATOR;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 195 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_MOD;
	return T_OPERATOR;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 200 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_INC;
	return T_OPERATOR;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 205 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_DEC;
	return T_OPERATOR;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 210 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_SHL;
	return T_OPERATOR;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_SHR;
	return T_OPERATOR;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 220 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_OR;
	return T_OPERATOR;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 225 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_AND;
	return T_OPERATOR;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 230 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_XOR;
	return T_OPERATOR;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 235 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_DBG_PRINT;
	return T_OPERATOR;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 240 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = INS_NOP;
	return T_OPERATOR;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 245 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = OP_JMP;
	return T_GOTO;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 250 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = OP_JZ;
	return T_GOTO;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 255 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = OP_JNZ;
	return T_GOTO;
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 260 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	TRACK_LINES(yytext, yyleng);
	BEGIN(ST_IN_ASM);
	return T_ASM;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 266 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	BEGIN(INITIAL);
	return yytext[0];
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 271 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_IF;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 275 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_ELSE;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 279 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_DO;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 283 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_WHILE;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 287 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_FOR;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 291 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_BREAK;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 295 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_CONTINUE;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 299 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = OP_JMP;
	return T_GOTO;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 304 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_NOP;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 308 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_DBG_PRINT_REGS;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 312 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SIZEOF;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 316 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_FUNCTION;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 320 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_RETURN;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 324 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_EQ;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 328 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_NE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 332 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_AND;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 336 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_OR;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 340 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_PTR_OP;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 344 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SHR;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 348 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SHL;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 352 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_INC;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 356 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_DEC;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 360 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_IMPORT;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 364 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_FROM;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 368 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_EXTERN;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 372 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_VAR;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 376 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_CHAR;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 380 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_STRING;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 384 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_INT;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 388 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_LONG;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 392 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SHORT;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 396 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SIGNED;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 400 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_UNSIGNED;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 404 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_FLOAT;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 408 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_DOUBLE;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 412 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_VOID;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 416 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	//char *text;
	//unsigned long len;

	yylval->string = cl_strdup("zlc v0.01 compiled at " __DATE__ " " __TIME__ " (c)oded by dEmon");
	yylval->size = strlen(yylval->string)+1;
	//yylval->value = (unsigned long) cl_section_data_push(&YYPP->data_table, ZLF_SECT_CONST, (char *) text, strlen(text)+1);
	//free_str(text);
	yylval->flags = ZLF_UNSIGNED | ZLF_CHAR;
	yylval->flags += 0x01000000;

	return T_CONSTANT_STRING;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 430 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	//char *text;
	//unsigned long len;
	
	yylval->string = cl_strdup("Sep 25 2005");
	yylval->size = strlen(yylval->string)+1;
	//yylval->value = (unsigned long) cl_section_data_push(&YYPP->data_table, ZLF_SECT_CONST, (char *) text, strlen(text)+1);
	//free_str(text);
	yylval->flags = ZLF_UNSIGNED | ZLF_CHAR;
	yylval->flags += 0x01000000;

	return T_CONSTANT_STRING;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 444 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	//char *text;
	//unsigned long len;
	
	yylval->string = cl_strdup("11:05:16");
	yylval->size = strlen(yylval->string)+1;
	//yylval->value = (unsigned long) cl_section_data_push(&YYPP->data_table, ZLF_SECT_CONST, (char *) text, strlen(text)+1);
	//free_str(text);
	yylval->flags = ZLF_UNSIGNED | ZLF_CHAR;
	yylval->flags += 0x01000000;

	return T_CONSTANT_STRING;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 458 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_ELLIPSIS;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 462 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_STRUCT;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 466 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_GE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 470 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_LE;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 474 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_ADD_ASSIGN;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 478 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SUB_ASSIGN;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 482 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_MUL_ASSIGN;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 486 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_DIV_ASSIGN;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 490 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_MOD_ASSIGN;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 494 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_AND_ASSIGN;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 498 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_OR_ASSIGN;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 502 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_XOR_ASSIGN;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 506 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SHL_ASSIGN;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 510 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return T_SHR_ASSIGN;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 514 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 0;
	yylval->flags = ZLF_SIGNED | ZLF_LONG | ZLF_INT;
	return T_CONSTANT_LONG;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 520 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = 1;
	yylval->flags = ZLF_SIGNED | ZLF_LONG | ZLF_INT;
	return T_CONSTANT_LONG;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 526 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	return yytext[0];
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 530 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	char *text;
	//char *unesc;
	//unsigned long len;
	
	text = cl_strndup(yytext+1, yyleng-2);
	yylval->string = alloc_unescapestring(text, &yylval->size);
	//yylval->value = (unsigned long) cl_section_data_push(&YYPP->data_table, ZLF_SECT_CONST, (char *) unesc, len+1);
	//free_str(unesc);
	free_str(text);
	yylval->flags = ZLF_UNSIGNED | ZLF_CHAR;
	yylval->flags += 0x01000000;
	return T_CONSTANT_STRING;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 545 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	char *text, *unesc;
	unsigned long len;
	text = cl_strndup(yytext+1, yyleng-2);
	unesc = alloc_unescapestring(text, &len);
	yylval->value = *unesc;
	free_str(unesc);
	free_str(text);
	yylval->flags = ZLF_UNSIGNED | ZLF_CHAR;
	return T_CONSTANT_LONG;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 557 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = cl_strtol(yytext, yyleng);
	yylval->flags = ZLF_SIGNED | ZLF_LONG | ZLF_INT;
	return T_CONSTANT_LONG;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 563 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->value = cl_strtoul(yytext, yyleng);
	yylval->flags = ZLF_UNSIGNED | ZLF_LONG | ZLF_INT;
	return T_CONSTANT_LONG;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 569 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->dvalue = cl_strtod(yytext, yyleng);
	yylval->flags = ZLF_DOUBLE;
	return T_CONSTANT_DOUBLE;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 575 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yylval->string = cl_strndup(yytext, yyleng);
	return T_LABEL;
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 580 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	TRACK_LINES(yytext, yyleng);
	//return T_WHITESPACE;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 585 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	//return T_WHITESPACE;
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 589 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	TRACK_LINES(yytext, yyleng);
	//return T_WHITESPACE;
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 594 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	YYPP->lineno++;
	return yytext[0];
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 599 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	TRACK_LINE(yytext[0]);
	return yytext[0];
}
	YY_BREAK
case 105:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 604 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	//return T_COMMENT;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 608 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	BEGIN(ST_COMMENT);
	yymore();
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 613 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yymore();
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 617 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yymore();
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 621 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	TRACK_LINES(yytext, yyleng);
	BEGIN(INITIAL);
	//return T_COMMENT;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ST_IN_SCRIPTING):
case YY_STATE_EOF(ST_IN_ASM):
case YY_STATE_EOF(ST_DOUBLE_QUOTES):
case YY_STATE_EOF(ST_SINGLE_QUOTE):
case YY_STATE_EOF(ST_BACKQUOTE):
case YY_STATE_EOF(ST_HEREDOC):
case YY_STATE_EOF(ST_LOOKING_FOR_PROPERTY):
case YY_STATE_EOF(ST_LOOKING_FOR_VARNAME):
case YY_STATE_EOF(ST_COMMENT):
case YY_STATE_EOF(ST_ONE_LINE_COMMENT):
#line 627 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
{
	yyterminate();
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 631 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"
ECHO;
	YY_BREAK
#line 1985 "zl_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 398 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 398 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 397);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 631 "C:\\_garbage\\_git\\zlc\\zl_lexer.l"


